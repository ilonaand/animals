{"version":3,"sources":["animal.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Animal","state","_state","this","makeCopy","Cat","newState","Dog","buttons","App","useState","animal","setAnimal","className","onClick","getName","makeSound","filter","map","caption","climb","run","seat","say","walk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAEsBA,EAAtB,WAGI,aAAuC,IAA3BC,EAA0B,uDAAX,UAAW,yBAF5BC,YAE4B,EAClCC,KAAKD,OAASD,EAJtB,mDAeQ,OAAOE,KAAKC,SAAS,aAf7B,4BAmBQ,OAAOD,KAAKC,SAAS,aAnB7B,6BAuBQ,OAAOD,KAAKC,SAAS,aAvB7B,8BA2BQ,OAAOD,KAAKC,SAAS,cA3B7B,4BA+BQ,OAAOD,KAAKC,SAAS,SA/B7B,4BAWQ,OAAOD,KAAKD,WAXpB,KAqCaG,EAAb,uKACaC,GACL,OAAO,IAAID,EAAIC,KAFvB,gCAMQ,MAAM,QANd,kCAUQ,MAAM,YAVd,GAAyBN,GAcZO,EAAb,uKACaD,GACL,OAAO,IAAIC,EAAID,KAFvB,gCAMQ,MAAM,QANd,kCAUQ,MAAM,WAVd,8BAcQ,OAAOH,KAAKC,SAASD,KAAKD,YAdlC,GAAyBF,GChDnBQ,EAA6B,CACjC,CAAC,OAAQ,WACT,CAAC,MAAO,WACR,CAAC,OAAQ,WACT,CAAC,QAAS,YACV,CAAC,MAAO,QAsCKC,MAnCf,WAAgB,IAAD,EAEeC,qBAFf,mBAENC,EAFM,KAEEC,EAFF,KAIb,OACE,yBAAKC,UAAU,OACb,6BACE,4BAAQC,QAAU,kBAAMF,EAAU,IAAIP,KAAtC,OACA,4BAAQS,QAAU,kBAAMF,EAAU,IAAIL,KAAtC,QAEF,6BAAOI,EAAM,UAAMA,EAAOI,WAAb,OAA0C,QAAjBJ,EAAOV,MAAiB,YAAMU,QAAN,IAAMA,OAAN,EAAMA,EAAQK,aAAc,OAASL,EAAOV,MAA7F,KAAwG,cACrH,6BAEIU,GACEH,EACGS,QAAQ,sDAA0BN,EAAOV,SACzCiB,KAAK,YAAuB,IAAD,mBAApBC,EAAoB,KAAXlB,EAAW,KAC1B,OAAO,4BAAQa,QAAU,kBAAMF,EACnB,aAAVX,EACEU,EAAOS,QACG,YAAVnB,EACAU,EAAOU,MACG,YAAVpB,EACAU,EAAOW,OACG,QAAVrB,EACAU,EAAOY,MACPZ,EAAOa,UACNL,SC5BDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9bbc405.chunk.js","sourcesContent":["export type State = 'SEATING' | 'RUNNING' | 'WALKING' | 'CLIMBING' | 'SAY';\n\nexport abstract class Animal {\n    protected _state: State;\n\n    constructor(state: State = 'SEATING') {\n        this._state = state;\n    }\n\n    abstract getName(): string;\n    abstract makeCopy(newState: State): Animal; \n\n    get state() {\n        return this._state;\n    }\n\n    seat() {\n        return this.makeCopy('SEATING');\n    }\n\n    run() {\n        return this.makeCopy('RUNNING');\n    }\n\n    walk() {\n        return this.makeCopy('WALKING');\n    }\n\n    climb(): Animal {\n        return this.makeCopy('CLIMBING');\n    }\n\n    say(): Animal {\n        return this.makeCopy('SAY');\n    }\n\n    abstract makeSound(): string;\n};\n\nexport class Cat extends Animal {\n    makeCopy(newState: State) {\n        return new Cat(newState);\n    }\n\n    getName() {\n        return `Cat`;\n    }\n    \n    makeSound() {\n        return `Meou!`;\n    }\n};\n\nexport class Dog extends Animal {\n    makeCopy(newState: State) {\n        return new Dog(newState);\n    }\n\n    getName() {\n        return `Dog`;\n    }\n\n    makeSound() {\n        return `Whoof!`;\n    }\n\n    climb() {\n        return this.makeCopy(this._state); \n    }\n};\n\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Animal, Cat, Dog, State } from './animal';\n\nconst buttons: [string, State][] = [\n  ['SEAT', 'SEATING'], \n  ['RUN', 'RUNNING'], \n  ['WALK', 'WALKING'],\n  ['CLIMB', 'CLIMBING'],\n  ['SAY', 'SAY']\n];\n\nfunction App() {\n\n  const [animal, setAnimal] = useState<Animal | undefined>();\n \n  return (\n    <div className=\"App\">\n      <div>\n        <button onClick={ () => setAnimal(new Cat()) } >cat</button>\n        <button onClick={ () => setAnimal(new Dog()) } >dog</button>\n      </div>\n      <div>{ animal ? `${animal.getName()}${animal.state === 'SAY'? ' ' + animal?.makeSound() : ' is ' + animal.state}.` : 'No animal!' }</div>\n      <div>\n        {\n          animal &&\n            buttons\n              .filter( ([_, state]) => state !== animal.state )\n              .map( ([caption, state]) => {\n                return <button onClick={ () => setAnimal(\n                  state === 'CLIMBING'\n                  ? animal.climb()\n                  : state === 'RUNNING'\n                  ? animal.run()\n                  : state === 'SEATING'\n                  ? animal.seat()\n                  : state === 'SAY'\n                  ? animal.say()\n                  : animal.walk()\n                ) }>{caption}</button>\n              })\n        }       \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}